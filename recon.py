import base64

# Base64-encoded version of the original script
encoded_script = """
<>
"""

# Decoding and executing the script
exec(base64.b64decode(encoded_script).decode('utf-8'))
